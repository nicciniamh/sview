import os
import sys
import textwrap
import subprocess
import inspect
import argparse
from pystemd.systemd1 import Unit, Manager
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, GdkPixbuf

debug_flag = False

def get_units(include_all=True):
	"""
	Returns a dictionary of unit information, keyed on the unit name.
	"""
	m = Manager()
	m.load()
	units = {}
	for u in m.ListUnits():
		ud = {}
		ud['unit'] = '\n'.join(textwrap.wrap(u[0].decode('utf-8'), 40))
		ud['description'] = '\n'.join(textwrap.wrap(u[1].decode('utf-8'), 40))
		ud['loaded'] = (u[2].decode('utf-8').lower() == 'loaded')
		ud['active'] = (u[3].decode('utf-8').lower() == 'active')
		ud['running'] = (u[4].decode('utf-8').lower() == 'running')
		ud['file'] = u[6]
		units[ud['unit']] = ud

	return units

class ServiceViewer(Gtk.Window):
	def __init__(self):
		Gtk.Window.__init__(self, title="Systemd Unit Viewer")
		self.connect('destroy', Gtk.main_quit)
		self.set_icon(GdkPixbuf.Pixbuf.new_from_file(os.path.expanduser('~/.icons/text-x-systemd-unit.png')))
		self.grid = None
		self.set_size_request(1280, 600)
		self.load_tree_view()
		self.search_buttons = []
		self.search_results = []
		self.search_index = 0

	def get_buttons(self, buttondef):
		"""
		Return a Gtk.ButtonBox populated with the buttons we want.
		"""
		self.button_box = buttons = Gtk.ButtonBox(orientation=Gtk.Orientation.HORIZONTAL)
		buttons.set_layout(Gtk.ButtonBoxStyle.START)

		for label, action in buttondef:
			button = Gtk.Button(label=label)
			button.connect('clicked', action)
			buttons.pack_start(button, False, False, 0)
		return buttons

	def load_tree_view(self, *args):
		self.units = get_units()
		buttons = self.get_buttons([('Close', Gtk.main_quit), ('Reload Units', self.load_tree_view), ('Search', self.on_search_clicked)])
		if self.grid:
			self.remove(self.grid)
		self.grid = Gtk.Grid()
		self.storelist = []
		self.scrolled_window = Gtk.ScrolledWindow()
		self.grid.attach(self.scrolled_window, 0, 0, 1, 1)
		self.grid.attach(buttons, 0, 1, 1, 1)
		self.store = Gtk.ListStore(str, str, bool, bool)
		for unit, ud in self.units.items():
			items = [unit, ud['description'], ud['active'], ud['running']]
			self.store.append(items)
			items.append(ud['file'])
			self.storelist.append(items)

		self.tree_view = Gtk.TreeView(model=self.store)

		# Text columns
		for i, column_title in enumerate(["Unit", "Description"]):
			renderer = Gtk.CellRendererText()
			column = Gtk.TreeViewColumn(column_title, renderer, text=i)
			column.set_expand(True)
			self.tree_view.append_column(column)
			# Make columns sortable
			column.set_sort_column_id(i)

		# Toggle columns
		for i, column_title in enumerate(["Active", "Running"], start=2):
			renderer = Gtk.CellRendererToggle()
			renderer.set_alignment(0.5, 0.5)
			renderer.connect("toggled", self.on_cell_toggled, (i, column_title))
			column = Gtk.TreeViewColumn(column_title, renderer, active=i)
			column.set_expand(True)
			column.set_alignment(0.5)
			self.tree_view.append_column(column)
			# Make columns sortable
			column.set_sort_column_id(i)

		self.scrolled_window.add(self.tree_view)
		self.scrolled_window.set_vexpand(True)
		self.scrolled_window.set_hexpand(True)

		self.add(self.grid)
		self.show_all()

	def on_cell_toggled(self, widget, path, user_data):
		i = int(path)
		index = Gtk.TreePath.new_from_string(path).get_indices()[0]
		column, column_title = user_data
		state = self.store[i][column] = not self.store[i][column]
		unit = self.store[i][0]
		self.set_service_state(unit, column_title, state)

	def set_service_state(self, unit, item, state):
		"""
		This is where we call systemd to manipulate units based on item and state.
		"""
		debug(unit, item, state)

		if item == 'Running':
			if state:
				self.run_systemctl_command('start', unit)
			else:
				self.run_systemctl_command('stop', unit)
		elif item == 'Active':
			if state:
				self.run_systemctl_command('enable', unit)
			else:
				self.run_systemctl_command('disable', unit)
		else:
			raise IndexError(f'Invalid item {item}')

	def run_systemctl_command(self, *args):
		# Command to run the privileged script with pkexec
		command = ["pkexec", "/bin/systemctl", *args]

		# Run the command
		try:
			result = subprocess.run(command, capture_output=True, text=True)
			if result.returncode == 0:
				print("Privileged task completed successfully", result.stdout)
			else:
				d = MessageDialog(self, "subprocess Error, systemctl returned non-zero", result.stderr)
				d.run()
				d.destroy()
		except Exception as e:
			d = MessageDialog(self, f"Exception calling systemctl", f"{e}\n{result.stderr}")
			d.run()
			d.destroy()

	def search_and_select(self, search_text):
		"""
		Search for the first row that contains the search_text in the first column and select it.
		"""
		self.search_results = []
		self.search_index = 0
		for row in self.store:
			if search_text.lower() in row[0].lower():
				path = self.store.get_path(row.iter)
				self.search_results.append(path)

		if len(self.search_results):
			search_index = -1
			self.open_search()
			self.search_next()
			return  True
		return False

	def open_search(self,*args):
		self.search_buttons = []
		for label, action in [('Search Previous',self.search_prev),('Search Next',self.search_next),('Close Search',self.close_search)]:
			button = Gtk.Button(label=label)
			button.connect('clicked',action)
			self.search_buttons.append(button)
			self.button_box.pack_start(button,True,True,0)
			self.button_box.show_all()

	def close_search(self,*args):
		for button in self.search_buttons:
			self.button_box.remove(button)
		self.search_buttons = []
		self.search_results = []
		self.search_index = 0

	def search_next(self,*args):
		if not len(self.search_results):
			return
		self.search_index += 1
		if self.search_index >= len(self.search_results):
			self.search_index = 0
		path = self.search_results[self.search_index]

		self.tree_view.set_cursor(path)
		self.tree_view.scroll_to_cell(path)

	def search_prev(self,*args):
		if not len(self.search_results):
			return
		self.search_index -= 1
		if self.search_index < 0:
			self.search_index = len(self.search_results) -1
		path = self.search_results[self.search_index]
	
		self.tree_view.set_cursor(path)
		self.tree_view.scroll_to_cell(path)


	def on_search_clicked(self, button):
		"""
		Handle search button click, show an input dialog to get search text.
		"""
		self.close_search()
		dialog = Gtk.MessageDialog(parent=self,
								   modal=True,
								   destroy_with_parent=True,
								   message_type=Gtk.MessageType.QUESTION,
								   buttons=Gtk.ButtonsType.OK_CANCEL,
								   text="Search Unit")
		dialog.set_title("Search Unit")
		entry = Gtk.Entry()
		entry.set_text("Enter unit name")
		dialog.vbox.pack_end(entry, True, True, 0)
		dialog.show_all()
		response = dialog.run()
		result = True
		if response == Gtk.ResponseType.OK:
			search_text = entry.get_text()
			result = self.search_and_select(search_text)
		dialog.destroy()
		if not result:
			dialog = MessageDialog(self,'No results',f'The term, "{search_text}" was not found.')
			dialog.run()
			dialog.destroy()

class MessageDialog(Gtk.Dialog):
	def __init__(self, parent, title, *args):
		super().__init__(title=title, transient_for=parent, flags=0)
		self.add_buttons(
			Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_OK, Gtk.ResponseType.OK
		)

		self.set_default_size(150, 100)

		label = Gtk.Label(label=' '.join([*args]))

		box = self.get_content_area()
		box.add(label)
		self.show_all()

class Debug:
	def __init__(self, debug_flag):
		self.debug_flag = debug_flag

	def set_debug(flag):
		''' turn debugging on and off with boolean '''
		self.debug_flag = flag

	def __call__(self, *args):
		''' print *args as debug message with caller '''
		if self.debug_flag:
			frames = inspect.stack()
			grandcaller = frames[3] if len(frames) >= 4 else None
			gc = '~none~'
			if grandcaller:
				grandcaller_file = os.path.basename(grandcaller.filename)
				grandcaller_line = grandcaller.lineno
				grandcaller_function = grandcaller.function
				gc = f"{grandcaller_file}:{grandcaller_line} {grandcaller_function}"

			frame = inspect.getouterframes(inspect.currentframe(), 2)[1]
			caller = frame[3]
			file = os.path.basename(frame[1])
			line = frame[2]
			cs = f'{file}:{line} {caller}'

			caller_text = f'{gc}->{cs}'
			tag = '\x1b[1;34;40mDEBUG\x1b[0m'
			print(f'{tag} - \033[1;36;40m{caller_text}\033[0m :\033[1;37;40m', *args, '\033[0m', file=sys.stderr)

if __name__ == "__main__":
	parser = argparse.ArgumentParser(description='Systemd Unit Viewer')
	parser.add_argument('-d', '--debug', action='store_true', default=False, help='Enable debug messages')
	args = parser.parse_args()
	debug = Debug(args.debug)
	if args.debug:
		debug("Debug messages enabled")
	s = ServiceViewer()
	Gtk.main()
